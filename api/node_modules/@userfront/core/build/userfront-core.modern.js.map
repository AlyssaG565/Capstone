{"version":3,"file":"userfront-core.modern.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/tokens.js","../src/constants.js","../src/cookies.js","../src/url.js","../src/refresh.js","../src/signon.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/logout.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJWTPayload(token) {\n  try {\n    const encodedPayload = token\n      .split(\".\")[1]\n      .replace(\"-\", \"+\")\n      .replace(\"_\", \"/\");\n    return JSON.parse(atob(encodedPayload));\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n","import { store } from \"./store.js\";\nimport { getJWTPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJWTPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"confirmedAt\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isConfirmed\",\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setTokensFromCookies, unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  Cookies.remove(name);\n  Cookies.remove(name, { secure: true, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: true, sameSite: \"None\" });\n  Cookies.remove(name, { secure: false, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: false, sameSite: \"None\" });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n","import axios from \"axios\";\n\nimport { apiUrl } from \"./constants.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await axios.get(`${apiUrl}self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport { apiUrl } from \"./constants.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await axios.get(`${apiUrl}auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import axios from \"axios\";\nimport { apiUrl } from \"./constants.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, redirectToPath } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * This file has methods for signing up and logging in\n */\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} data - Object for custom user fields\n * @param {String} redirect - path to redirect to, or if false, do not redirect\n */\nexport async function signup({\n  method,\n  username,\n  name,\n  email,\n  password,\n  data,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signupWithSSO({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n\n/**\n * Register a new user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n */\nfunction signupWithSSO({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @param {String} redirect - do not redirect if false, or redirect to a specific path\n */\nasync function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n} = {}) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/create`, {\n      tenantId: store.tenantId,\n      username,\n      name,\n      email,\n      password,\n      data: userData,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      if (redirect === false) return data;\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n      return data;\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} email\n * @param {String} username\n * @param {String} emailOrUsername\n * @param {String} password\n * @param {String} token\n * @param {String} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function login({\n  method,\n  email,\n  username,\n  emailOrUsername,\n  password,\n  token,\n  uuid,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return loginWithSSO({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({ token, uuid, redirect });\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n\n/**\n * Log a user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nfunction loginWithSSO({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenant ID\");\n\n  let url = `https://api.userfront.com/v0/auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} options\n */\nasync function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n}) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/basic`, {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      if (redirect === false) return data;\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n      return data;\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithLink({ token, uuid, redirect } = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await axios.put(`${apiUrl}auth/link`, {\n      token,\n      uuid,\n      tenantId: store.tenantId,\n    });\n\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      if (redirect === false) return data;\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n      return data;\n    } else {\n      throw new Error(\"Problem logging in.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function resetPassword({ uuid, token, password, redirect }) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await axios.put(`${apiUrl}auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n\n      // Return if redirect is explicitly false\n      if (redirect === false) return data;\n\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n\n      return data;\n    } else {\n      throw new Error(\n        \"There was a problem resetting your password. Please try again.\"\n      );\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import axios from \"axios\";\nimport { apiUrl, privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nexport async function setMode() {\n  try {\n    const { data } = await axios.get(`${apiUrl}tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\n\nimport axios from \"axios\";\nimport { apiUrl } from \"./constants.js\";\nimport { refresh } from \"./refresh.js\";\nimport { store } from \"./store.js\";\nimport { getJWTPayload } from \"./utils.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await axios.put(`${apiUrl}self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJWTPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { redirectIfLoggedIn } from \"./url.js\";\nimport {\n  login,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  signup,\n} from \"./signon.js\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenant ID\");\n\n  store.tenantId = tenantId;\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    axios.defaults.headers.common[\n      \"x-application-id\"\n    ] = `https://${store.domain}`;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n  setModeSync();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh,\n\n  // signon\n  login,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // url\n  redirectIfLoggedIn,\n\n  // user\n  user,\n\n  // utils\n};\n","import axios from \"axios\";\nimport { apiUrl } from \"./constants.js\";\n\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { redirectToPath } from \"./url\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ redirect } = {}) {\n  if (!store.tokens.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    if (redirect === false) return;\n    redirectToPath(redirect || data.redirectTo);\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   redirectToPath(data.redirectTo || \"/\");\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n"],"names":["store","user","tokens","mode","getJWTPayload","token","encodedPayload","split","replace","JSON","parse","atob","error","console","throwFormattedError","Error","response","_error$response","data","_error$response$data","message","setTokensFromCookies","map","tokenName","Cookies","get","idToken","warn","idTokenPayload","propsToDefine","prop","setUser","apiUrl","privateIPRegex","setCookie","value","options","type","cookieName","tenantId","secure","sameSite","set","removeCookie","name","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","undefined","refreshToken","attr","unsetUser","setCookiesAndTokens","access","cookieOptions","id","refresh","getQueryAttr","attrName","window","location","href","indexOf","decodeURIComponent","redirectToPath","pathOrUrl","document","el","createElement","pathname","assign","hash","search","async","status","axios","headers","authorization","basicRefresh","exchange","getProviderLink","provider","redirect","url","origin","redirectTo","encodeURIComponent","sendPasswordlessLink","email","username","userData","post","reason","setMode","getReason","err","setModeSync","modeValue","hn","hostname","match","isTestHostname","protocol","isHttps","update","payload","Object","keys","length","put","hasRole","roleName","roles","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","domain","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","login","method","emailOrUsername","password","uuid","loginWithSSO","loginWithPassword","loginWithLink","resetPassword","sendLoginLink","sendResetLink","signup","signupWithSSO","signupWithPassword","redirectIfLoggedIn","tenant","loginRedirectPath"],"mappings":"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"}